(
// allocate a Buffer
s = Server.local;
b = Buffer.alloc(s, 44100 * 4.0, 1); // a four second 1 channel Buffer
)

Server.local.options.memSize = 20*8192;



{
	// rotation via mouse
	var out;
	out = BufRd.ar(1, 0, Phasor.ar(0, BufRateScale.kr(0), 0, BufFrames.kr(0)), 1, 4) * 0.3;
	out = out + (BufRd.ar(1, 0, Phasor.ar(0, BufRateScale.kr(0), BufFrames.kr(0) / 8, BufFrames.kr(0)), 1, 4) * 0.3);
	[out,out]
}.play;

{ Mix.new([ PinkNoise.ar(0.1), FSinOsc.ar(801, 0.1), LFSaw.ar(40, 0.1)]) }.play


play({
var a,root,mixed,sig,dsig,phase_control;
root = 50 + 12;
sig = (Saw.ar(root.midicps,0.1) + Saw.ar((root + 7).midicps,0.05) + Saw.ar((root - 7).midicps,0.05));
phase_control = SinOsc.ar(LFNoise2.kr(4, 0.2, 0.3),0,0.005,0.008);
dsig = AllpassL.ar(sig, 4, phase_control, 0);
mixed = sig + dsig;
	#w, x, y, z = PanB.ar(mixed, LinLin.ar(LFNoise2.ar(2),-1,1,0,pi), LinLin.ar(LFNoise2.ar(2),-1,1,0,pi), 0.3);
	//decode for 4 channels
	DecodeB2.ar(2, w, x, y, 0.5);
});

play({
var in, out, time, delay;
time = 1;
delay = time / 4;
in = AudioIn.ar([1]);
out = Pan2.ar(in,-1) * 0.4;
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 1), -1);
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 2), -0.5);
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 3), 0.5);
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 4), 1);
});

play({
var in, out, time, delay;
time = 2;
delay = time / 3;
in = AudioIn.ar([1]);
out = Pan2.ar(in,-1) * 0.4;
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 1), -0.5);
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 2), -0);
out = out + Pan2.ar(DelayL.ar(in: in, maxdelaytime: time, delaytime: delay * 3), 0.5);
});

(
// pitch shift input - USE HEADPHONES to prevent feedback.
play({
	PitchShift.ar(
		AudioIn.ar([1,2]),	// stereo audio input
		0.1, 			// grain size
		MouseX.kr(0,2),	// mouse x controls pitch shift ratio
		0, 				// pitch dispersion
		0.004			// time dispersion
	)
}))

{
var in, out, left_x, left_y, right_x, right_y, point_x, point_y, distance, left_channel,right_channel, left_distance, right_distance;
left_x = -0.1;
right_y = 0;
right_x = 0.1;
left_y = 0;
point_x = SinOsc.kr(0.1) * -2;
point_y = SinOsc.kr(0.1, pi/2) * -2.5;

left_distance = (((left_x - point_x) ** 2) - ((left_y - point_y) ** 2)) ** (1/2);
right_distance = (((right_x - point_x) ** 2) - ((right_y - point_y) ** 2)) ** (1/2);

in = SinOsc.ar(400);

left_channel = DelayL.ar(in: in, maxdelaytime: 3, delaytime: left_distance / 630);
right_channel = DelayL.ar(in: in, maxdelaytime: 3, delaytime: right_distance / 630);

[left_channel,right_channel]
}.play



